<?php
/**
 * Magento
 *  
 * NOTICE OF LICENSE
 *  
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *  
 * DISCLAIMER
 *  
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *  
 * @category  Nosto
 * @package   Nosto_Tagging
 * @author    Nosto Solutions Ltd <magento@nosto.com>
 * @copyright Copyright (c) 2013-2019 Nosto Solutions Ltd (http://www.nosto.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 *     ______     ___     ____  _____  ___   _________   ________ ______  _____ _________
 *    |_   _ `. .'   `.  |_   \|_   _.'   `.|  _   _  | |_   __  |_   _ `|_   _|  _   _  |
 *      | | `. /  .-.  \   |   \ | |/  .-.  |_/ | | \_|   | |_ \_| | | `. \| | |_/ | | \_|
 *      | |  | | |   | |   | |\ \| || |   | |   | |       |  _| _  | |  | || |     | |
 *     _| |_.' \  `-'  /  _| |_\   |\  `-'  /  _| |_     _| |__/ |_| |_.' _| |_   _| |_
 *    |______.' `.___.'  |_____|\____`.___.'  |_____|   |________|______.|_____| |_____|
 *
 * Nosto sends information over both the API and the broswer tagging. Values for the tagging is generated
 * via the Nosto corresponding objects. In order to customize the values in the markup below, you will need
 * to override the core parts of the extension. Failure to do so will result in broken and incorrect
 * recommendations.
 * Please see a reference guide such as https://github.com/Nosto/nosto-magento/wiki/
 */

/* @var $this Nosto_Tagging_Block_Addtocart */
$formAction = $this->getAddToCartUrl();
/** @var Mage_Core_Model_Session $session */
$session = Mage::getSingleton('core/session');
$formKey = $session->getFormKey();
?>
<!-- Nosto `add-to-cart` Script -->
<!--suppress JSUnresolvedFunction -->
<script type="text/javascript">
    if (typeof Nosto === "undefined") {
        var Nosto = {};
    }
    Nosto.addProductToCart = function (productId, element) {
        Nosto.trackAddToCartClick(productId, element);
        var fields = {
            "product": productId,
            "form_key": "<?php echo $formKey; ?>"
        };
        Nosto.postAddToCartForm(fields, "<?php echo $formAction; ?>");
    };

    // Products must be and array of objects [{productId: "123", skuId: "321"}]
    Nosto.addMultipleProductsToCart = function (products, element) {
        var productsArray = [];
        var skus = [];
        products.forEach(function(product) {
            Nosto.trackAddToCartClick(product.productId, element);
            productsArray.push(product.productId);
            skus.push(product.skuId);
        });
        var fields = {};
        fields["product"] = productsArray;
        fields["skus"] = skus;
        fields["form_key"]= "<?php echo $formKey; ?>";
        Nosto.postAddToCartForm(fields, "<?php echo $this->getAddMultipleProductsToCartUrl() ?>");
    };

    // Product object must have fields productId and skuId {productId: 123, skuId: 321}
    Nosto.addSkuToCart = function (product, element, quantity) {
        quantity = quantity || 1;
        Nosto.trackAddToCartClick(product.productId, element);
        var fields = {
            "product": product.productId,
            "sku": product.skuId,
            "qty": quantity,
            "form_key": "<?php echo $formKey; ?>"
        };
        Nosto.postAddToCartForm(fields, "<?php echo $this->getAddSkuToCartUrl(); ?>");
    };
    Nosto.resolveContextSlotId = function (element) {
        var m = 20;
        var n = 0;
        var e = element;
        while (typeof e.parentElement !== "undefined" && e.parentElement) {
            ++n;
            e = e.parentElement;
            if (e.getAttribute('class') === 'nosto_element' && e.getAttribute('id')) {
                return e.getAttribute('id');
            }
            if (n >= m) {
                return false;
            }
        }
        return false;
    };
    Nosto.trackAddToCartClick = function (productId, element) {
        if (typeof nostojs !== 'undefined' && typeof element === 'object') {
            var slotId = Nosto.resolveContextSlotId(element);
            if (slotId) {
                nostojs(function (api) {
                    api.recommendedProductAddedToCart(productId, slotId);
                });
            }
        }
    };
    Nosto.postAddToCartForm = function (data, url) {
        var form = document.createElement("form");
        form.setAttribute("method", "post");
        form.setAttribute("action", url);
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", data[key]);
                form.appendChild(hiddenField);
            }
        }
        document.body.appendChild(form);
        form.submit();
    };
</script>
